#!/bin/bash
export MSYS_NO_PATHCONV=1
SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage () {
  cat <<-EOF

  Allows you to manage certain aspects of project environment.

  Usage:
    $0 [options] [commands]

  Commands:
  ========
    createNewIssuerProfile <profileName> [templateProfileName]
      - Create a new issuer deployment configuration profile from an existing one.
      - Automatically performs the rename of the profile name within the copied files.
        All other content is left unchanged.

        Example;
          $0 -p default -e null createNewIssuerProfile travelauth

    createNewVerifierProfile <profileName> [templateProfileName]
      - Create a new visual-verifier deployment configuration profile from an existing one.
      - Automatically performs the rename of the profile name within the copied files.
        All other content is left unchanged.

        Example;
          $0 -p default -e null createNewVerifierProfile travelauth

    configureProof <baseUrl> <payLoadPath> [namespace] [secretName] [key]
      - Post a proof configuration to a vc-authn-oidc controller.
      - To update, PUT, use the '-u' (update) option; see examples below.
      - To POST/PUT ALL proof configurations, specify 'all' for <payLoadPath>.

        Examples;
          $0 -p default -e null configureProof https://toip-vc-authn-controller-dev.apps.silver.devops.gov.bc.ca ../proof-configurations/verified-person/verified-person.json
            - POST verified-person.json
          $0 -p default -e null -u configureProof https://toip-vc-authn-controller-dev.apps.silver.devops.gov.bc.ca ../proof-configurations/verified-person/verified-person.json
            - PUT verified-person.json

          $0 -p default -e dev -u configureProof https://toip-vc-authn-controller-dev.apps.silver.devops.gov.bc.ca all
            - PUT all proof configurations for the 'dev' environment.
          $0 -p default -e null -u configureProof https://toip-vc-authn-controller-dev.apps.silver.devops.gov.bc.ca all
            - PUT all proof configurations for all environments.

    deployAllProfiles
      - Helper script to deploy all of the profiles to a given environment.
      - All options, such as the '-e' and '-u' flags, are passed from the options specified on the manage command.

        Examples;
          $0 -p default -e test deployAllProfiles         - Deploy all profiles
          $0 -p default -e test deployAllProfiles -q      - Deploy all profiles, without asking.
          $0 -p default -e test -u deployAllProfiles      - Update all profiles
          $0 -p default -e test -g deployAllProfiles      - Create (generate only) all profiles

    createProdParams
      - Helper script to create '*.prod.param' files from '*.test.param' files.

        Examples;
          $0 -p default -e null createProdParams

    clean
      - Remove the application components from a given environment.
        Specify the environment using the -e option.

    delete
      - Delete allapplication components from a given environment.
        Specify the environment using the -e option.

    untag
      - Untag all of the application images.  Deletes all tags except 'latest'.

    scaleUp
      - Scale up one or more pods based on their profile.
        Example;
          $0 -p bcgov-citz -e prod scaleUp agent api issuer-web

    scaleDown
      - Scale down one or more pods based on their profile.
        Example;
          $0 -p bcgov-citz -e prod scaleDown agent api issuer-web

    recycle
      - Recycle one or more pods.
        Example;
          $0 -p bcgov-citz -e prod recycle agent api issuer-web
EOF
}

# =================================================================================================================
# Process the local command line arguments and pass everything else along.
# - The 'getopts' options string must start with ':' for this to work.
# -----------------------------------------------------------------------------------------------------------------
while [ ${OPTIND} -le $# ]; do
  if getopts :s: FLAG; then
    case ${FLAG} in
      # List of local options:
      s ) resourceSuffix=$OPTARG ;;

      # Pass unrecognized options ...
      \?) pass+=" -${OPTARG}" ;;
    esac
  else
    # Pass unrecognized arguments ...
    pass+=" ${!OPTIND}"
    let OPTIND++
  fi
done

# Pass the unrecognized arguments along for further processing ...
shift $((OPTIND-1))
set -- "$@" $(echo -e "${pass}" | sed -e 's/^[[:space:]]*//')
# =================================================================================================================

# -----------------------------------------------------------------------------------------------------------------
# Define hook scripts:
# - These must be defined before the main settings script 'settings.sh' is loaded.
# -----------------------------------------------------------------------------------------------------------------
onRequiredOptionsExist() {
  (
    if [ -z "${DEPLOYMENT_ENV_NAME}" ]; then
      _red='\033[0;31m'
      _nc='\033[0m' # No Color
          echo -e "\n${_red}You MUST specify an environment name using the '-e' flag.${_nc}"
          echo -e "${_red}Assuming a default would have unwanted consequences.${_nc}\n"
          return 1
        else
          return 0
    fi
  )
}

onUsesCommandLineArguments() {
  (
    # This script is expecting command line arguments to be passed ...
    return 0
  )
}

# -----------------------------------------------------------------------------------------------------------------
# Initialization:
# -----------------------------------------------------------------------------------------------------------------
# Load the project settings and functions ...
_includeFile="ocFunctions.inc"
_settingsFile="settings.sh"
if [ ! -z $(type -p ${_includeFile}) ]; then
  _includeFilePath=$(type -p ${_includeFile})
  export OCTOOLSBIN=$(dirname ${_includeFilePath})

  if [ -f ${OCTOOLSBIN}/${_settingsFile} ]; then
    . ${OCTOOLSBIN}/${_settingsFile}
  fi

  if [ -f ${OCTOOLSBIN}/${_includeFile} ]; then
    . ${OCTOOLSBIN}/${_includeFile}
  fi
else
  _red='\033[0;31m'
  _yellow='\033[1;33m'
  _nc='\033[0m' # No Color
  echo -e \\n"${_red}${_includeFile} could not be found on the path.${_nc}"
  echo -e "${_yellow}Please ensure the openshift-developer-tools are installed on and registered on your path.${_nc}"
  echo -e "${_yellow}https://github.com/BCDevOps/openshift-developer-tools${_nc}"
fi

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
deleteResources() {
  (
    _appName=${1}
    if [ -z "${_appName}" ]; then
      echoError "\ncleanResources; You MUST specify the name of the application group.\n"
      exit 1
    fi

    printAndAskToContinue "If you contiune all of the resources for '${_appName}' will be deleted.  All data will be lost."
    oc -n $(getProjectName) delete all,secret,pvc,configmap,NetworkSecurityPolicy -l app-group=${_appName}
  )
}

cleanResources() {
  (
    _appName=${1}
    if [ -z "${_appName}" ]; then
      echoError "\ncleanResources; You MUST specify the name of the application group.\n"
      exit 1
    fi

    echoWarning "Cleaning out resources for '${_appName}'.  Secrets and PVCs will be retained."
    oc -n $(getProjectName) delete all,configmap,NetworkSecurityPolicy -l app-group=${_appName}
  )
}

createNewIssuerProfile() {
  profileName=${1}
  templateProfile=${2:-bcreg-citz}
  if [ -z "${profileName}" ]; then
    echoError "\ncreateNewIssuerProfile; You MUST specify a profile name.\n"
    exit 1
  fi

  echo -e "\nCreating a new settings profile ..."
  sourceSettings="settings.${templateProfile}.sh"
  destSettings="settings.${profileName}.sh"
  echo " - ${destSettings}"
  cat ${sourceSettings} > ${destSettings}

  echo -e "\nCreating the base set of deployment .param files ..."
  searchPath="./templates"
  searchFilter="*-deploy.${templateProfile}.param"
  templateParams=$(find ${searchPath} -type f -name "${searchFilter}")
  for templateParam in ${templateParams}; do
    destPath=$(echo ${templateParam} | sed s~${templateProfile}~${profileName}~)
    echo " - ${destPath}"
    cat ${templateParam} | sed s~${templateProfile}~${profileName}~ > ${destPath}
  done

  echo -e "\nCreating the base set of deployment test.param files ..."
  searchPath="./templates"
  searchFilter="*-deploy.${templateProfile}.test.param"
  templateParams=$(find ${searchPath} -type f -name "${searchFilter}")
  for templateParam in ${templateParams}; do
    destPath=$(echo ${templateParam} | sed s~${templateProfile}~${profileName}~)
    echo " - ${destPath}"
    cat ${templateParam} | sed s~${templateProfile}~${profileName}~ > ${destPath}
  done

  echo -e "\nCreating the base set of deployment prod.param files ..."
  searchPath="./templates"
  searchFilter="*-deploy.${templateProfile}.prod.param"
  templateParams=$(find ${searchPath} -type f -name "${searchFilter}")
  for templateParam in ${templateParams}; do
    destPath=$(echo ${templateParam} | sed s~${templateProfile}~${profileName}~)
    echo " - ${destPath}"
    cat ${templateParam} | sed s~${templateProfile}~${profileName}~ > ${destPath}
  done

  echo -e "\nCreating the base api profile configuration(s) ..."
  searchPath="./templates"
  searchFilter="*/${templateProfile}/schemas.json"
  templateConfigDir=$(getDirectory $(find ${searchPath} -type f -path "${searchFilter}"))
  templateConfigs=$(find ${templateConfigDir} -type f)
  for templateConfig in ${templateConfigs}; do
    destPath=$(echo ${templateConfig} | sed s~${templateProfile}~${profileName}~)
    echo " - ${destPath}"
    mkdir -p $(getDirectory ${destPath})
    cat ${templateConfig} | sed s~${templateProfile}~${profileName}~ > ${destPath}
  done

  echo -e "\nCreating the base issuer-web profile configurations ..."
  searchPath="./templates"
  searchFilter="*/${templateProfile}/logo.svg"
  templateConfigDir=$(getDirectory $(find ${searchPath} -type f -path "${searchFilter}"))
  templateConfigs=$(find ${templateConfigDir} -type f)
  for templateConfig in ${templateConfigs}; do
    destPath=$(echo ${templateConfig} | sed s~${templateProfile}~${profileName}~)
    echo " - ${destPath}"
    mkdir -p $(getDirectory ${destPath})
    cat ${templateConfig} | sed s~${templateProfile}~${profileName}~ > ${destPath}
  done
}

createNewVerifierProfile() {
  profileName=${1}
  templateProfile=${2:-business-bank}
  if [ -z "${profileName}" ]; then
    echoError "\ncreateNewVerifierProfile; You MUST specify a profile name.\n"
    exit 1
  fi

  echo -e "\nCopying from template config folder into new profile config folder ..."
  #copy config files from template to new vv
  configPath="templates/visual-verifier/config/"
  if [ ! -d "${configPath}${profileName}" ]; then
    cp -r "${configPath}${templateProfile}" "${configPath}${profileName}"
  fi

  echo -e "\nCreating a new settings profile ..."
  sourceSettings="settings.${templateProfile}.sh"
  destSettings="settings.${profileName}.sh"
  echo " - ${destSettings}"
  cat ${sourceSettings} > ${destSettings}

  echo -e "\nCreating the base set of deployment .param files ..."
  searchPath="./templates"
  searchFilter="*-deploy.${templateProfile}.param"
  templateParams=$(find ${searchPath} -type f -name "${searchFilter}")
  for templateParam in ${templateParams}; do
    destPath=$(echo ${templateParam} | sed s~${templateProfile}~${profileName}~)
    echo " - ${destPath}"
    cat ${templateParam} | sed s~${templateProfile}~${profileName}~ > ${destPath}
  done

  echo -e "\nCreating the base set of deployment test.param files ..."
  searchPath="./templates"
  searchFilter="*-deploy.${templateProfile}.test.param"
  templateParams=$(find ${searchPath} -type f -name "${searchFilter}")
  for templateParam in ${templateParams}; do
    destPath=$(echo ${templateParam} | sed s~${templateProfile}~${profileName}~)
    echo " - ${destPath}"
    cat ${templateParam} | sed s~${templateProfile}~${profileName}~ > ${destPath}
  done

  echo -e "\nCreating the base set of deployment prod.param files ..."
  searchPath="./templates"
  searchFilter="*-deploy.${templateProfile}.prod.param"
  templateParams=$(find ${searchPath} -type f -name "${searchFilter}")
  for templateParam in ${templateParams}; do
    destPath=$(echo ${templateParam} | sed s~${templateProfile}~${profileName}~)
    echo " - ${destPath}"
    cat ${templateParam} | sed s~${templateProfile}~${profileName}~ > ${destPath}
  done
}

configureProof() {
  baseUrl=${1}
  payLoadPath=${2}
  namespace=${3}-${DEPLOYMENT_ENV_NAME}
  secretName=${4}
  key=${5}
  if [ -z "${baseUrl}" ] || [ -z "${payLoadPath}" ]|| [ -z "${namespace}" ]|| [ -z "${secretName}" ]|| [ -z "${key}" ]; then
    echoError "\nconfigureProof; You MUST specify the following parameters:\n- baseUrl\n- payLoadPath\n- namespace\n- secretName\n- key"
    exit 1
  fi

  apiKey=$(getSecret "${secretName}" "${key}" "${namespace}")
  if [ -z "${apiKey}" ]; then
    echoError "\nconfigureProof; Unable to process request:\n - Unable to locate the API Key for ${baseUrl}.\n   Please ensure you are logged into OpenShift and have access to the following resources.\n   - Namespace: ${namespace}\n   - Secret Name: ${secretName}\n   - Key: ${key}"
    exit 1
  fi

  if createOperation; then
    httpCommand="POST"
  else
    httpCommand="PUT"
  fi

  if [ ${payLoadPath} == "all" ]; then
    if [ "${DEPLOYMENT_ENV_NAME}" != "null" ]; then
      searchPath="../proof-configurations/**/${DEPLOYMENT_ENV_NAME}"
    else
      searchPath="../proof-configurations"
    fi

    searchFilter="*.json"
    payLoadPaths=$(find ${searchPath} -type f -name "${searchFilter}")
  else
    payLoadPaths=${payLoadPath}
  fi

  for payLoadPath in ${payLoadPaths}; do
    echo -e "\n${httpCommand}ing '${payLoadPath}' to ${baseUrl} ...\n"
    curl \
      -X ${httpCommand} \
      -H X-Api-Key:${apiKey} \
      -H accept:application/json \
      -H Content-Type:application/json-patch+json \
      --data @${payLoadPath} \
      ${baseUrl}/api/vc-configs
  done
}

deployAllProfiles() {

  local OPTIND
  unset local quiet
  while getopts q FLAG; do
    case $FLAG in
      q ) local quiet=1
        ;;
    esac
  done
  shift $((OPTIND-1))

  profiles=$(getProfiles)
  for profile in ${profiles}; do
    if [ ${profile} != "default" ]; then
      if [ -z ${quiet} ]; then
        printAndAskToContinue "Deploying '${profile}' to '${DEPLOYMENT_ENV_NAME}' ..."
      else
        echoWarning "Deploying '${profile}' to '${DEPLOYMENT_ENV_NAME}' ..."
      fi

      # Override the current profile settings ...
      export PROFILE=${profile}
      export SKIP_PIPELINE_PROCESSING=
      export ignore_templates=
      export include_templates=

      # Load the desired profile settings ...
      _settingsFile=settings.${PROFILE}.sh
      echo -e "Loading settings from ${PWD}/${_settingsFile##*/} ..."
      . ${_settingsFile}

      # Options for genDepls.sh script come from the options used for the ./manage script ...
      genDepls.sh
    fi
  done
}

createProdParams() {
  sourceEnvironmentProfile="test"
  targetEnvironmentProfile="prod"

  echo -e "\nCreating a '${targetEnvironmentProfile}' set of deployment .param files, using the '${sourceEnvironmentProfile}' profile as the template ..."
  searchPath="./templates"
  searchFilter="*-deploy.*.${sourceEnvironmentProfile}.param"
  templateParams=$(find ${searchPath} -type f -name "${searchFilter}")
  for templateParam in ${templateParams}; do
    destPath=$(echo ${templateParam} | sed s~${sourceEnvironmentProfile}~${targetEnvironmentProfile}~)
    echo " - ${destPath}"
    cat ${templateParam} | sed s~${sourceEnvironmentProfile}~${targetEnvironmentProfile}~ | sed s~\-${targetEnvironmentProfile}~~ | sed s~${targetEnvironmentProfile}\.bcovrin~${sourceEnvironmentProfile}\.bcovrin~ > ${destPath}
  done
}

formatContainerList() {
  for container in ${@}; do
    containerList+=" ${container}-${PROFILE}"
  done
  echo $(echo -e "${containerList}" | sed -e 's/^[[:space:]]*//')
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
_cmd=$(toLower ${1})
shift

case "${_cmd}" in
  clean)
    appName=${1:-${PROFILE}}
    cleanResources ${appName}
    ;;

  delete)
    appName=${1:-${PROFILE}}
    deleteResources ${appName}
    ;;

  untag)
    appName=${1:-issuer-kit}
    untagImages ${appName}
    ;;

  createnewissuerprofile)
    profileName=${1}
    templateProfile=${2:-bcgov-citz}
    createNewIssuerProfile ${profileName} ${templateProfile}
    ;;

  createnewverifierprofile)
    profileName=${1}
    templateProfile=${2:-business-bank}
    createNewVerifierProfile ${profileName} ${templateProfile}
    ;;

  configureproof)
    baseUrl=${1}
    payLoadPath=${2}
    namespace=${3:-nnfbch}
    secretName=${4:-vc-authn-controller}
    key=${5:-controller-api-key}
    configureProof ${baseUrl} ${payLoadPath} ${namespace} ${secretName} ${key}
    ;;

  deployallprofiles)
    deployAllProfiles ${@}
    ;;

  createprodparams)
    createProdParams
    ;;

  scaleup)
    scaleUp -w $(formatContainerList ${@})
    ;;
  scaledown)
    scaleDown -w $(formatContainerList ${@})
    ;;
  recycle)
    recyclePods -w $(formatContainerList ${@})
    ;;

  *)
    echoWarning "Unrecognized command; ${_cmd}"
    globalUsage
    ;;
esac

popd >/dev/null